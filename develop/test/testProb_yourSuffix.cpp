/* This file was automatically generated by CasADi 3.6.7.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) testProb_yourSuffix_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_f2 CASADI_PREFIX(f2)
#define casadi_f3 CASADI_PREFIX(f3)
#define casadi_f4 CASADI_PREFIX(f4)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_s3 CASADI_PREFIX(s3)
#define casadi_s4 CASADI_PREFIX(s4)
#define casadi_s5 CASADI_PREFIX(s5)
#define casadi_s6 CASADI_PREFIX(s6)
#define casadi_sq CASADI_PREFIX(sq)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

casadi_real casadi_sq(casadi_real x) { return x*x;}

static const casadi_int casadi_s0[9] = {5, 1, 0, 5, 0, 1, 2, 3, 4};
static const casadi_int casadi_s1[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s2[5] = {1, 1, 0, 1, 0};
static const casadi_int casadi_s3[13] = {1, 5, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0};
static const casadi_int casadi_s4[7] = {3, 1, 0, 3, 0, 1, 2};
static const casadi_int casadi_s5[17] = {3, 5, 0, 3, 6, 7, 8, 9, 0, 1, 2, 0, 1, 2, 0, 0, 0};
static const casadi_int casadi_s6[15] = {5, 5, 0, 2, 4, 5, 6, 7, 0, 2, 1, 3, 2, 3, 4};

/* testProb_f:(i0[5],i1[2])->(o0) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3, a4, a5;
  a0=arg[0]? arg[0][0] : 0;
  a1=casadi_sq(a0);
  a2=arg[0]? arg[0][1] : 0;
  a3=casadi_sq(a2);
  a1=(a1+a3);
  a3=arg[0]? arg[0][2] : 0;
  a4=casadi_sq(a3);
  a1=(a1+a4);
  a4=arg[0]? arg[0][3] : 0;
  a5=casadi_sq(a4);
  a1=(a1+a5);
  a5=arg[0]? arg[0][4] : 0;
  a5=casadi_sq(a5);
  a1=(a1+a5);
  a5=arg[1]? arg[1][0] : 0;
  a5=(a5*a2);
  a5=(a5*a4);
  a1=(a1+a5);
  a5=arg[1]? arg[1][1] : 0;
  a5=(a5*a0);
  a5=(a5*a3);
  a1=(a1+a5);
  if (res[0]!=0) res[0][0]=a1;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_f(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_f_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_f_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_f_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_f_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_f_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_f_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_f_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_f_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_f_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real testProb_f_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_f_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_f_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_f_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_f_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s2;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_f_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_f_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 1*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 0*sizeof(casadi_real);
  return 0;
}

/* testProb_df:(i0[5],i1[2])->(o0[1x5]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3, a4, a5, a6, a7;
  a0=arg[1]? arg[1][1] : 0;
  a1=arg[0]? arg[0][2] : 0;
  a2=(a0*a1);
  a3=arg[0]? arg[0][0] : 0;
  a4=(a3+a3);
  a2=(a2+a4);
  if (res[0]!=0) res[0][0]=a2;
  a2=arg[1]? arg[1][0] : 0;
  a4=arg[0]? arg[0][3] : 0;
  a5=(a2*a4);
  a6=arg[0]? arg[0][1] : 0;
  a7=(a6+a6);
  a5=(a5+a7);
  if (res[0]!=0) res[0][1]=a5;
  a0=(a0*a3);
  a1=(a1+a1);
  a0=(a0+a1);
  if (res[0]!=0) res[0][2]=a0;
  a2=(a2*a6);
  a4=(a4+a4);
  a2=(a2+a4);
  if (res[0]!=0) res[0][3]=a2;
  a2=arg[0]? arg[0][4] : 0;
  a2=(a2+a2);
  if (res[0]!=0) res[0][4]=a2;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_df(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f1(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_df_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_df_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_df_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_df_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_df_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_df_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_df_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_df_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_df_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real testProb_df_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_df_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_df_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_df_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_df_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s3;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_df_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_df_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 1*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 0*sizeof(casadi_real);
  return 0;
}

/* testProb_eq:(i0[5],i1[2])->(o0[3]) */
static int casadi_f2(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a2, a3;
  a0=arg[0]? arg[0][0] : 0;
  a1=arg[0]? arg[0][1] : 0;
  a2=(a0+a1);
  a3=arg[0]? arg[0][2] : 0;
  a2=(a2+a3);
  a3=arg[0]? arg[0][3] : 0;
  a2=(a2+a3);
  a3=arg[0]? arg[0][4] : 0;
  a2=(a2+a3);
  a3=10.;
  a2=(a2-a3);
  if (res[0]!=0) res[0][0]=a2;
  a2=(a0-a1);
  if (res[0]!=0) res[0][1]=a2;
  a0=(a0-a1);
  if (res[0]!=0) res[0][2]=a0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_eq(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f2(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_eq_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_eq_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_eq_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_eq_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_eq_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_eq_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_eq_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_eq_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_eq_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real testProb_eq_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_eq_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_eq_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_eq_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_eq_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s4;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_eq_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_eq_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 1*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 0*sizeof(casadi_real);
  return 0;
}

/* testProb_deq:(i0[5],i1[2])->(o0[3x5,9nz]) */
static int casadi_f3(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1;
  a0=1.;
  if (res[0]!=0) res[0][0]=a0;
  if (res[0]!=0) res[0][1]=a0;
  if (res[0]!=0) res[0][2]=a0;
  if (res[0]!=0) res[0][3]=a0;
  a1=-1.;
  if (res[0]!=0) res[0][4]=a1;
  if (res[0]!=0) res[0][5]=a1;
  if (res[0]!=0) res[0][6]=a0;
  if (res[0]!=0) res[0][7]=a0;
  if (res[0]!=0) res[0][8]=a0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_deq(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f3(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_deq_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_deq_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_deq_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_deq_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_deq_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_deq_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_deq_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_deq_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_deq_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real testProb_deq_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_deq_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_deq_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_deq_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_deq_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s5;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_deq_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_deq_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 1*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 0*sizeof(casadi_real);
  return 0;
}

/* testProb_h_lower:(i0[5],i1[3],i2[2])->(o0[5x5,7nz]) */
static int casadi_f4(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1;
  a0=2.;
  if (res[0]!=0) res[0][0]=a0;
  a1=arg[2]? arg[2][1] : 0;
  if (res[0]!=0) res[0][1]=a1;
  if (res[0]!=0) res[0][2]=a0;
  a1=arg[2]? arg[2][0] : 0;
  if (res[0]!=0) res[0][3]=a1;
  if (res[0]!=0) res[0][4]=a0;
  if (res[0]!=0) res[0][5]=a0;
  if (res[0]!=0) res[0][6]=a0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_h_lower(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f4(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_h_lower_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_h_lower_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_h_lower_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_h_lower_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_h_lower_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_h_lower_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void testProb_h_lower_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_h_lower_n_in(void) { return 3;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int testProb_h_lower_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real testProb_h_lower_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_h_lower_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* testProb_h_lower_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_h_lower_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s4;
    case 2: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* testProb_h_lower_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s6;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_h_lower_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 3;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int testProb_h_lower_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 3*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 1*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 0*sizeof(casadi_real);
  return 0;
}


